import os
import cv2
import numpy as np
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split

# Load images
def load_images(folder_path, img_size=(128, 128)):
    images = []
    labels = []
    classes = os.listdir(folder_path)
    class_dict = {cls: i for i, cls in enumerate(classes)}
    
    for cls in classes:
        cls_folder = os.path.join(folder_path, cls)
        for img_name in os.listdir(cls_folder):
            img_path = os.path.join(cls_folder, img_name)
            img = cv2.imread(img_path)
            img = cv2.resize(img, img_size)
            images.append(img)
            labels.append(class_dict[cls])
    
    return np.array(images), to_categorical(labels), class_dict

X, y, class_dict = load_images("dataset_path_here")
X = X / 255.0  # Normalize
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D((2,2)),
    
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D((2,2)),

    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D((2,2)),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(len(class_dict), activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()
model.fit(X_train, y_train, validation_split=0.1, epochs=10, batch_size=32)
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy*100:.2f}%")
def predict_image(img_path):
    img = cv2.imread(img_path)
    img = cv2.resize(img, (128, 128))
    img = img / 255.0
    img = np.expand_dims(img, axis=0)
    pred = model.predict(img)
    class_index = np.argmax(pred)
    for cls, idx in class_dict.items():
        if idx == class_index:
            return cls

print(predict_image("test_image.jpg"))

